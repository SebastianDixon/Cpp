operators


very similar to python

++ is the increment operation

&& is logical and, || is logical or

if statements


a typical 'if' statement has an opposite 'switch' statement

```
char response{'y'}; 
if (response == 'y' || response == 'Y') 
{ 
    cout << "correct response" << endl; 
}
```
this is an example of an if statement
the character variable 'response' is being used as the condition in the if selection
given the variables value being true, the operation inside of the brackets is executed, this executes the output message 'correct reponse' to console and finishes

the 'else if' is the same as the elif statement in python:
the else statement is used the same as in python:

this is an implementation of both of these for the same example:
```
char response{'y'}; 
if (response == 'y' || response == 'Y') 
{ 
    cout << "correct response" << endl; 
} 
else if (response == 'n' || response == 'N') 
{ 
    cout << "incorrect response" << endl; 
} 
else 
{ 
    cout << "invalid input" << endl; 
}
```

switch statements


a switch is used to replace multiple 'else if' statements, collecting them all into one block to make it easier to read and understand

```
int value = 1;
switch (value)
{
    case '1':
        cout<< "this is a one" << endl;
        break;
    case '2':
        cout<< "this is a two not a one, wrong" << endl;
        break;
    case '4':
        cout<< "this is 4, guess again, wrong" << endl;
        break;
    default:
        cout<< "this is not a one, two or four"<< endl;
        break;
}
```

this is an implementation of a switch statement, the different 'case' statements are individual selection statements
break is used after each case in order to finish the switch statement, and move to the piece of code after the enclosing braces
the default line of code isn't required, but acts as a catch all 

if the break is not used, the code will 'fall through' to the case below and perform unexpectedly 

switch will work with all intrinsic data types and enumerations

conditional statement


 the conditional is a ternary statement, i.e. it acts as three inputs

it acts as a selection statement and a switch at the same time in a more compact form

```
int i = 2, j = 3;
cout << (i > j ? i : j) << "is greater" << endl;
```
here a conditional statement has been formed,
the integers i and j are created with respective values 2 and 3

the statement below 
- checks if i is greater than j
	- if true i is selected
	- if false j is selected
- after the '?' the declaration between i and j is stated

since the statement i > j return false, j is selected. as j represented the integer '3', the output look like: 3 is greater

repetition statement


for, while and do loops are all iteration statements

the for loop includes parameters, each have a fixed purpose, the items functions is as follows
1. initialise the variable
2. determine the limiting value of the variable which will break the loop
3. give the operation on the variable after each repetition
semicolons ' ; ' must be used in-between the parameters
```
for (int i = 0; i < 10; ++i)
{
 cout<< "the name of the monkey is:" + i << endl;
}
```

- in this case an integer 'i' has been made with a value of 0, 
- the constraint is i reaching the value  of 10, 
- the modifier is ++i, this increases the value of i by 1 each loop

the while loop uses brackets to  include the condition which will break the loop
```
int x = 5;
while (x >0)
{
 --x;
}
```
- the integer x is made with value 5
- the limiting condition is x>0, therefore the loop will break when x=0
- the operation inside the loop is '--x', this will decrease the value of x by 1 each loop


another more complex example of while loop:
```
string response;
cout << "repsonse is: " <<  '\n' << "Quit" << '\n' << "More" << endl;
cin >> response;

while (response != "Quit")
 {
     cout << "Looping again" << endl;
     cout << '\n';
     cout << "repsonse is: " <<  '\n' << "Quit" << '\n' << "More" << endl;
     cin >> response;
 }
```

the string 'response' is initialised
the different options are output for the response are output ( the '\n' is a method for moving the string output to the next line )
the 'std::cin' is the method for getting input from the console, note that '>>' is used in this case

the two options for input of 'Quit' or 'More' indicate that in the while loop condition, it stops if the value of the string 'response' is equal to 'Quit'

the while loop includes the same input statement 'cin' so that the loop doesn't repeat infinitely

the do loop is similar to a while loop although, the code will always output at least once
```
string ask;
do
 {
     cout << "enter :" << '\n' << "More or Quit" << endl;
     cin >> ask;
 } while (ask != "Quit");
```

the while conditional statement is shown at the end of the operation inside the loop
the conditional statement must be Boolean

loops can of course be nested inside each other