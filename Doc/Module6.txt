Headers


a class file allows you to model real world application in your code

the #include pre-processor directive is used to implement the header file
in c++ it is common practice to split your classes into two files, the function file, ending in .h, and the implementation of that code in the other, .cpp file

e.g. creating a function to perform a mathematical operation such as exponent
producing a header file which contains the mathematical operation as such will be good practice

```
#pragma once
// math.h
using namespace std;

void Pow(int base, int power)
{
    int output = base;
    for(int count = power -1; count > 0; --count)
    {
        output *= base;
        cout << output << endl;
    }
    cout << "Answer is: " << output << endl;
}
```

```
#include "math.h"
// main.cpp
using namespace std;

int main()
{
    Pow(4,5);
    
    return 0;
}
```
the .cpp file used the include statement and was able to use the function defined in the header file

a static class can be defined in the header, the static keyword would allow the class to be used without having to have made an instantiation of it before hand

Dynamic object creation


the instance of a class can be created using pointers, these are initialised as such:

```
Person * p3 = new Person("Rick", "Gervais", 50);

p3->get_iD();
```

in order to perform operation on these pointers the arrow selection statement is used instead of the dot selection

```
delete p3;
```

then delete the pointer after use to prevent a system memory leak

Class scope


regardless of the variables label of either private or public, all the functions inside the class can use those variables, the private / public is only for outside the class

Encapsulation


the user should not be aware of the data in the background

```
void Person::setfName(string fName)
{
    this->first_name = fName;
    cout << this->first_name << endl;
}
```

is an example of encapsulation for a private variable first_name

Namespace


namespaces are used to prevent conflict with keywords for class creation

a custom namespace can be used to prevent multiple keystrokes
```
namespace Microsoft
    {
        namespace Geometry
        {
            const double PI = 3.14159;
    
            double Area(double radius)
            {
                return PI*(radius*radius);
            }
        }
        
    }

using namespace Microsoft
```

this namespace can be used and then a statement can be formed to use the function

```
double val = 5;
double area = Geometry::Area(val);
```

if multiple namespaces use the same function names, they cannot be used at the same time as the compiler has no way of figuring out which function from which namespace is desired