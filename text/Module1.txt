compilation process


pre-processing
- takes c++ source and evaluation pre-processor directives
- produces a pre-processor file
compiling
- converts pre-processed code source code into object files
- checks for correct syntax
- accepts a 'promise' from the code about imported source files
linking
- converts all object files into one executable
- ensures all promises are kept

coding notes


c++ is case sensitive

curly braces enclose the statements made in source
statement examples include
- function
- for loops

good use of whitespace is encouraged to improve readability,  the compiler ignores white space

an indentation after initialising a for loop is not sufficient to indicate the code needed in the loop, curly braces must be used to indicate the code inside

statements


declarations - make constants and variables
assignments - defining a value to the variable 
comments - used to document code
executables - such as    std::cout<< "Hello World";    to print hello world

numeric data


different data types in c++ have
- different ranges, 
- signed or unsigned, 
- have a certain number of bytes represented in the local memory
- longer and shorter alternatives

other data types


the enum data type, or enumeration stores any set of constants stored as literal values

an example of an enum data type would be the days of the week, they might be stored as an array in string data type.
since they are a part of a fixed data type enumeration, no other invalid days of the week could be added to that array, as it has already been defined otherwise

choosing data types


its important that use of the correct data type is made so that your code is efficient,  e.g. using short instead of int when your code is within the bounds